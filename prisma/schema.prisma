// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  username  String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  events    Event[]
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  stories     Story[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model Story {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Public submission fields (filled by public)
  submitterEmail    String
  submitterUsername String
  title             String
  content           String
  anonymous         Boolean @default(false)

  // User-controlled fields (managed by event owner)
  tags   String[]    @default([])
  status StoryStatus @default(PENDING_REVIEW)

  // System fields
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.ObjectId
}

enum StoryStatus {
  PENDING_REVIEW // Public submitted, waiting for user review
  APPROVED // User approved the submission
  REJECTED // User rejected the submission
  READ // User read it
}
